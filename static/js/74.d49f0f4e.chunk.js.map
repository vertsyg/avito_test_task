{"version":3,"file":"static/js/74.d49f0f4e.chunk.js","mappings":"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","sources":["components/BackButton.tsx","services/games.ts","utils/convertFilterOptions.ts","store/action-creator/games.ts","hooks/useAction.ts","hooks/useTypedSelector.ts","components/GameInfo.tsx","pages/GamePage.tsx","utils/checkGameFromCache.ts","utils/convertTime.ts"],"sourcesContent":["import { Button } from \"antd\"\r\nimport { Link } from \"react-router-dom\"\r\nimport { ArrowLeftOutlined } from '@ant-design/icons'\r\n\r\nconst BackButton = () => {\r\n  return (\r\n    <Button  type=\"primary\" style={{marginBottom:'10px'}}>\r\n      <Link to='/'><ArrowLeftOutlined/> Back to Main</Link>\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default BackButton","import axios from \"axios\";\r\nimport { IGame } from \"../types/games\";\r\n\r\nexport const fetchGamesByAllParameters = async (platform: string, genre: string, sorting: string):Promise<IGame[]> => {\r\n  \r\n  const URL = `https://www.freetogame.com/api/games?platform=${platform}&category=${genre}&sort-by=${sorting}&callback=myCallback`\r\n\r\n  const response = await axios.get(URL)\r\n\r\n  return response.data\r\n}\r\n\r\nexport const fetchGamesWithoutCategory = async (platform: string, sorting: string): Promise<IGame[]> => {\r\n  const URL = `https://www.freetogame.com/api/games?platform=${platform}&sort-by=${sorting}`\r\n  \r\n    const response = await axios.get(URL)\r\n    \r\n    return response.data\r\n}\r\n\r\n\r\nexport const getOneGame = async (gameId: number): Promise<IGame> => {\r\n  const URL = `https://www.freetogame.com/api/game?id=${gameId}`\r\n\r\n  const result = await  axios.get(URL)\r\n\r\n  return result.data\r\n}","export const convertFilterOption = (option:string) => {\r\n    if (option === 'All Platforms' || option === 'All Genres') {\r\n        return 'all'\r\n    } else if (option === 'PC (Windows)') {\r\n        return 'pc'\r\n    } else if (option === 'Web Browser') {\r\n        return 'browser'\r\n    } else {\r\n        return option.toLowerCase().replace(' ', '-')\r\n    }\r\n}","import { Dispatch } from \"redux\"\r\nimport { GamesAction, GamesActionTypes, IGame  } from \"../../types/games\"\r\nimport { fetchGamesByAllParameters, fetchGamesWithoutCategory, getOneGame } from \"../../services/games\"\r\nimport { getGameFromCache } from \"../../utils/checkGameFromCache\"\r\nimport { convertFilterOption } from \"../../utils/convertFilterOptions\"\r\n\r\nexport const fetchGames = (platform: string, genre: string, sorting: string) => {\r\n  return async (dispatch: Dispatch<GamesAction>) => {\r\n      try {\r\n          dispatch({ type: GamesActionTypes.FETCH_GAMES });\r\n\r\n          const games = genre === 'all' ? await fetchGamesWithoutCategory(platform, sorting) : await fetchGamesByAllParameters(platform, genre, sorting)\r\n\r\n          dispatch({ type: GamesActionTypes.FETCH_GAMES_SUCCESS, payload: games });\r\n      } catch (error) {\r\n          dispatch({\r\n              type: GamesActionTypes.FETCH_GAMES_ERROR,\r\n              payload: `Oops! Can't load the data. ${error}`\r\n          });\r\n      }\r\n  }\r\n}\r\n\r\nexport const fetchOneGame = (gameId: number) => {\r\n  return async (dispatch: Dispatch<GamesAction>) => {\r\n    try {\r\n      dispatch({ type: GamesActionTypes.FETCH_ONE_GAME });\r\n      const game: IGame = await getOneGame(gameId); \r\n\r\n      const currentTime = new Date().getTime();\r\n      const cachedGame = {\r\n        data: game,\r\n        timestamp: currentTime,\r\n      };\r\n      localStorage.setItem(`game_${gameId}`, JSON.stringify(cachedGame));\r\n\r\n      dispatch({\r\n        type: GamesActionTypes.FETCH_ONE_GAME_SUCCESS,\r\n        payload: game,\r\n      });\r\n    } catch (error) {\r\n      dispatch({\r\n        type: GamesActionTypes.FETCH_ONE_GAME_ERROR,\r\n        payload: `Oops! Can't load the data. ${error}`,\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\n\r\nexport const fetchGameFromCache = (gameId: number) => {\r\n\r\n  return (dispatch:Dispatch<GamesAction>) =>  {\r\n    dispatch({ type: GamesActionTypes.FETCH_ONE_GAME })\r\n\r\n    const data = getGameFromCache(gameId)\r\n\r\n    dispatch({type: GamesActionTypes.FETCH_ONE_GAME_SUCCESS, payload: data})\r\n  }\r\n}\r\n\r\nexport const changeGenre = (genre:string) => {\r\n  return async (dispatch: Dispatch<GamesAction>) => {\r\n    dispatch({type: GamesActionTypes.CHANGE_GENRE, payload: convertFilterOption(genre)})\r\n  }\r\n}\r\n\r\nexport const changePlatform = (platform: string) => {\r\n  return async (dispatch: Dispatch<GamesAction>) => {\r\n    dispatch({type: GamesActionTypes.CHANGE_PLATFORM, payload: convertFilterOption(platform)})\r\n  }\r\n}\r\n\r\nexport const changeSorting = (filter: string) => {\r\n  return async (dispatch: Dispatch<GamesAction>) => {\r\n    dispatch({type: GamesActionTypes.CHANGE_SORTING, payload: convertFilterOption(filter)})\r\n  }\r\n}","import { useDispatch } from \"react-redux\"\r\nimport { bindActionCreators } from \"redux\"\r\nimport * as GamesActionCreator from '../store/action-creator/games'\r\n\r\n\r\nexport const useActions = () => {\r\n    const dispatch = useDispatch()\r\n    return bindActionCreators(GamesActionCreator, dispatch)\r\n}","import { TypedUseSelectorHook, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../store\";\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector","import {useEffect} from 'react'\r\nimport { useTypedSelector } from '../hooks/useTypedSelector'\r\nimport { useActions } from '../hooks/useAction'\r\nimport { Carousel, Col, Row, Spin } from 'antd'\r\nimport { convertTime } from '../utils/convertTime'\r\nimport { checkGameFromCache } from '../utils/checkGameFromCache'\r\n\r\ninterface GameInfoProps {\r\n    gameId: number,\r\n}\r\n\r\nconst GameInfo = ({gameId}: GameInfoProps) => {\r\n\r\n  const {error, game, loading } = useTypedSelector(state => state)\r\n  const {fetchOneGame, fetchGameFromCache} = useActions()\r\n\r\n  useEffect(() => {\r\n    checkGameFromCache(gameId) ? fetchGameFromCache(gameId) : fetchOneGame(gameId)       \r\n  }, [gameId])\r\n\r\n  if (loading) {\r\n    return <Spin spinning={loading}/>\r\n  }\r\n    \r\n  if (error) {\r\n    return <h1>{error}</h1>\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Row gutter={[8, 16]}>\r\n        <Col xs={24} md={8}>\r\n          <img src={game?.thumbnail} alt='Poster' />\r\n          <h1>{game?.title}</h1>\r\n          <p><span style={{color: 'rgba(255, 255, 255, 0.5)'}}>Genre:</span> {game?.genre}</p>\r\n          <p><span style={{color: 'rgba(255, 255, 255, 0.5)'}}>Developer:</span> {game?.developer}</p>\r\n          <p><span style={{color: 'rgba(255, 255, 255, 0.5)'}}>Publisher:</span> {game?.publisher}</p>\r\n          {game?.release_date && <p><span style={{color: 'rgba(255, 255, 255, 0.5)'}}>Release Date:</span> {convertTime(game?.release_date)}</p>}\r\n        </Col>\r\n        <Col xs={24} md={16}>\r\n          <Carousel autoplay>\r\n            {game?.screenshots.map((screenshot) => (\r\n              <img key={screenshot.id} src={screenshot.image} alt='Screenshot' />\r\n            ))}\r\n          </Carousel>\r\n        </Col>\r\n      </Row>\r\n      {game?.minimum_system_requirements && \r\n        <Row gutter={[8, 16]}>\r\n          <Col xs={24}>\r\n            <p style={{fontSize:'1.5em' }}>System Requirements:</p>\r\n          </Col>\r\n          <Col xs={24} sm={8}>\r\n            <p><span style={{ color: '#1677ff' }}>OS:</span> {game?.minimum_system_requirements.os}</p>\r\n            <p><span style={{ color: '#1677ff' }}>Memory:</span> {game?.minimum_system_requirements.memory}</p>\r\n          </Col>\r\n          <Col xs={24} sm={8}>\r\n            <p><span style={{ color: '#1677ff' }}>Processor:</span> {game?.minimum_system_requirements.processor}</p>\r\n            <p><span style={{ color: '#1677ff' }}>Storage:</span> {game?.minimum_system_requirements.storage}</p>\r\n          </Col>\r\n          <Col xs={24} sm={8}>\r\n            <p><span style={{ color: '#1677ff' }}>Graphics:</span> {game?.minimum_system_requirements.graphics}</p>\r\n          </Col>\r\n        </Row>\r\n      }\r\n    </>\r\n  );\r\n};\r\n      \r\n\r\nexport default GameInfo","import { useParams } from \"react-router-dom\"\r\n\r\nimport GameInfo from \"../components/GameInfo\"\r\nimport BackButton from \"../components/BackButton\"\r\n\r\nconst GamePage = () => {\r\n    const {gameId} = useParams()\r\n    return (\r\n        <div style={{ width: '85vw', margin:'0 auto' }}>\r\n            <BackButton/>\r\n            <GameInfo gameId={Number(gameId)}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GamePage","export const checkGameFromCache = (gameId: number) => {\r\n    const cachedGame = localStorage.getItem(`game_${gameId}`)\r\n    if (cachedGame) {\r\n        const gameParsed = JSON.parse(cachedGame)\r\n        const cacheTime = gameParsed.timestamp\r\n        const currentTime = new Date().getTime()\r\n\r\n        if (currentTime - cacheTime < 300000) {\r\n            return gameParsed.data\r\n        } else {\r\n            localStorage.removeItem(`game_${gameId}`)\r\n        }\r\n    }\r\n}\r\n\r\nexport const getGameFromCache = (gameId: number) => {\r\n    const cachedGame = localStorage.getItem(`game_${gameId}`)\r\n    if (cachedGame) {\r\n        return JSON.parse(cachedGame).data\r\n    }\r\n}","export const convertTime = (data: string) => {\r\n    return data.split('-').reverse().join('.')\r\n}"],"names":["_jsx","Button","type","style","marginBottom","children","_jsxs","Link","to","ArrowLeftOutlined","fetchGamesByAllParameters","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","platform","genre","sorting","URL","response","wrap","_context","prev","next","concat","axios","get","sent","abrupt","data","stop","_x","_x2","_x3","apply","arguments","fetchGamesWithoutCategory","_ref2","_callee2","_context2","_x4","_x5","getOneGame","_ref3","_callee3","gameId","result","_context3","_x6","convertFilterOption","option","toLowerCase","replace","fetchGames","dispatch","games","GamesActionTypes","FETCH_GAMES","t0","FETCH_GAMES_SUCCESS","payload","t1","FETCH_GAMES_ERROR","fetchOneGame","game","currentTime","cachedGame","FETCH_ONE_GAME","Date","getTime","timestamp","localStorage","setItem","JSON","stringify","FETCH_ONE_GAME_SUCCESS","FETCH_ONE_GAME_ERROR","fetchGameFromCache","getGameFromCache","changeGenre","CHANGE_GENRE","changePlatform","_ref4","_callee4","_context4","CHANGE_PLATFORM","changeSorting","filter","_ref5","_callee5","_context5","CHANGE_SORTING","useActions","useDispatch","bindActionCreators","GamesActionCreator","useTypedSelector","useSelector","_useTypedSelector","state","error","loading","_useActions","useEffect","checkGameFromCache","Spin","spinning","_Fragment","Row","gutter","Col","xs","md","src","thumbnail","alt","title","color","developer","publisher","release_date","convertTime","Carousel","autoplay","screenshots","map","screenshot","image","id","minimum_system_requirements","fontSize","sm","os","memory","processor","storage","graphics","useParams","width","margin","BackButton","GameInfo","Number","getItem","gameParsed","parse","cacheTime","removeItem","split","reverse","join"],"sourceRoot":""}